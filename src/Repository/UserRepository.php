<?phpnamespace MovieTracker\Repository;use MovieTracker\Infra\Connection;use MovieTracker\Model\User;use MovieTracker\Repository\Interface\UserRepositoryInterface;use PDO;class UserRepository implements UserRepositoryInterface{    private PDO $pdo;    private static $singleton;    /**     * @param PDO|null $pdo     */    public function __construct(PDO $pdo = null)    {        if(is_null($pdo)){            $this->pdo = Connection::getConnection();        } else {            $this->pdo = $pdo;        }    }    public static function getSingleton()    {        if(is_null(self::$singleton)){            self::$singleton = new self();        }        return self::$singleton;    }    public function findUserByEmail($email): ?User    {        $sql = "SELECT * FROM user WHERE email = :email;";        $statement = $this->pdo->prepare($sql);        $statement->bindValue(':email', strtolower($email));        $statement->execute();        return $this->hydrateUser($statement);    }    public function saveUser(User $user): bool    {        $sql = "INSERT INTO user (email, password) VALUES (:email, :password);";        $statement = $this->pdo->prepare($sql);        $statement->bindValue(":email", $user->getEmail());        $statement->bindValue(":password", $user->getPassword());        $result = $statement->execute();        if($result) {            $user->setId($this->pdo->lastInsertId());        }        return $result;    }    private function hydrateUser(\PDOStatement $stmt): ?User    {        $result = $stmt->fetch();        if($result) {            return $user = new User(                $result["email"],                $result["password"],                $result["id"]            );        }        return null;    }}